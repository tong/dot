#!/bin/bash
#
# colortest256 - Display a 256-color test pattern in the terminal.

set -eu # Fail on errors or undeclared variables

readonly printable_colours=256

# Return a colour (0 or 15) that contrasts with the given colour.
contrast_colour() {
  local colour=$1
  local r g b luminance

  # For the first 16 ANSI colours, contrast is simple.
  if ((colour < 16)); then
    if ((colour == 0)); then # Black background
      printf "15"            # White text
    else
      printf "0" # Black text
    fi
    return
  fi

  # For the greyscale ramp, contrast depends on brightness.
  if ((colour > 231)); then
    if ((colour < 244)); then # Dark grey background
      printf "15"             # White text
    else
      printf "0" # Black text
    fi
    return
  fi

  # For the 6x6x6 colour cube, calculate perceived brightness.
  # Formula: color = 16 + 36*R + 6*G + B, where R,G,B are in [0..5].
  r=$(((colour - 16) / 36))
  g=$(((colour - 16) % 36 / 6))
  b=$(((colour - 16) % 6))

  # Calculate perceived brightness using the standard formula (ITU R-REC-BT.601).
  # See https://www.w3.org/TR/AERT#color-contrast
  # Luminance is in range 0..5000 as each component is 0..5.
  luminance=$((r * 299 + g * 587 + b * 114))

  # If luminance is high, use black text (0), otherwise use white (15).
  if ((luminance > 2500)); then
    printf "0"
  else
    printf "15"
  fi
}

# Print a single coloured block with the number of that colour.
print_colour() {
  local colour=$1
  local contrast
  contrast=$(contrast_colour "$colour")
  # Set background, set foreground, print number, then reset.
  printf '\e[48;5;%sm\e[38;5;%sm%3d\e[0m ' "$colour" "$contrast" "$colour"
}

# Starting at $1, print a horizontal run of $2 colours.
print_run() {
  local start=$1
  local count=$2
  local i
  for ((i = start; i < start + count && i < printable_colours; i++)); do
    print_colour "$i"
  done
  printf "  " # Spacer after a run
}

# Print a grid of colours, arranged in blocks.
print_blocks() {
  local start=$1
  local end=$2
  local block_cols=$3
  local block_rows=$4
  local blocks_per_line=$5

  local block_length=$((block_cols * block_rows))
  local line_of_blocks_length=$((blocks_per_line * block_length))

  local i
  for ((i = start; i <= end; i += line_of_blocks_length)); do
    printf "\n"
    local row
    for ((row = 0; row < block_rows; row++)); do
      local block
      for ((block = 0; block < blocks_per_line; block++)); do
        local run_start=$((i + block * block_length + row * block_cols))
        if ((run_start <= end)); then
          print_run "$run_start" "$block_cols"
        fi
      done
      printf "\n"
    done
  done
}

# The first 16 colours are spread over the whole spectrum.
print_run 0 16
printf "\n"

# 6x6x6 colour cube between 16 and 231 inclusive.
print_blocks 16 231 6 6 3

# 24 Shades of Grey.
print_blocks 232 255 12 2 1
