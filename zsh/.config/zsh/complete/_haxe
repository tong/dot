#compdef haxe

compctl -g "*.hxml" haxe

_haxe_files() {
    ls -d */ *.hxml
}

_haxe() {

    local ret=-1

    _arguments \
        "--js[generate JavaScript code into target file]" \
        "--lua[generate Lua code into target file]" \
        "--swf[generate Flash SWF bytecode into target file]" \
        "--neko[generate Neko bytecode into target file]" \
        "--php[generate PHP code into target directory]" \
        "--cpp[generate C++ code into target directory]" \
        "--cppia[generate Cppia bytecode into target file]" \
        "--cs[generate C# code into target directory]" \
        "--java[generate Java code into target directory]" \
        "--jvm[generate JVM bytecode into target file]" \
        "--python[generate Python code into target file]" \
        "--hl[generate HashLink .hl bytecode or .c code into target file]" \
        "--interp[interpret the program using internal macro system]" \
        "--run[interpret a Haxe module with command line arguments]" \
        {-p,--class-path}"[show extended help information]" \
        {-m,--main}"[select startup class]" \
        {-L,--library}"[use a haxelib library]" \
        {-D,--define}"[define a conditional compilation flag]" \
        {-r,--resource}"[add a named resource file]" \
        "--cmd[run the specified command after successful compilation]" \
        "--remap[remap a package to another one]" \
        "--macro[call the given macro before typing anything else]" \
        {-C,--cwd}"[set current working directory]" \
        "--haxelib-global[pass --global argument to haxelib]" \
        "--dce[set the dead code elimination mode (default std)]" \
        "--no-traces[don't compile trace calls in the program]" \
        "--no-outout[compiles but does not generate any file]" \
        "--no-inline[disable inlining]" \
        "--no-opt[disable code optimizations]" \
        {-v,--verbose}"[turn on verbose mode]" \
        "--debug[add debug information to the compiled code]" \
        "--prompt[prompt on error]" \
        "--times[measure compilation time]" \
        "--next[separate several haxe compilations]" \
        "--each[append preceding parameters to all Haxe compilations separated by --next]" \
        "--display[display code tips]" \
        "--xml[generate XML types description]" \
        "--json[generate JSON types description]" \
        "--server-listen[wait on the given port (or use standard i/o) for commands to run]" \
        "--server-connect[connect to the given port and wait for commands to run]" \
        "--connect[connect on the given port and run commands there]" \
        "--swf-version[change the SWF version]" \
        "--swf-header[define SWF header (width:height:fps:color)]" \
        "--flash-strict[more type strict flash API]" \
        "--swf-lib[add the SWF library to the compiled SWF]" \
        "--swf-lib-extern[use the SWF library for type checking]" \
        "--java-lib[add an external JAR or directory of JAR files]" \
        "--java-lib-extern[use an external JAR or directory of JAR files for type checking]" \
        "--net-lib[add an external .NET DLL file]" \
        "--net-std[add a root std .NET DLL search path]" \
        "--c-arg[pass option <arg> to the native Java/C# compiler]" \
        "--version[print version and exit]" \
        {-h,--help}"[show extended help information]" \
        "--help-defines[print help for all compiler specific defines]" \
        "--help-metas[print help for all compiler metadatas]" \
    && ret=0
        #'*::arg:->args' \
        #"*::haxe files:($(ls -d */ *.hxml))" \
        #"*: :_files" \
    #echo $state
    case "$words[2]" in
        args)
            #echo "args: $words"
            ;;
        --dce)
            dce_modes=(
                'std:Only classes in the Haxe Standard Library are affected' \
                'no:No DCE is performed' \
                'full:All classes are affected by DCE'
            )
            #_values 'dce modes' ${_haxe_dce_modes[@]}
            _describe -t commands 'dce modes' dce_modes
            ;;
        # --help-metas)
        #     help_metas=(
        #         '@\:using:Automatically uses the argument types as static extensions for the annotated type'
        #         '@\:void:Use Cpp native `void` return type (cpp only)'
        #
        #     )
            _describe -t commands 'metas' help_metas
    esac
    return ret
}

_haxe "$@"
